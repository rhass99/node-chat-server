{"version":3,"sources":["../src/ws-server.js"],"names":["process","env","NODE_ENV","require","config","server","createServer","app","socketServer","io","port","PORT","listen","console","log","history","htmlEntities","str","String","replace","handleIO","socket","disconnected","on","msg","length","json","JSON","stringify","emit","historyObj","time","Date","getTime","text","author","clientMsg","push","slice","userName","type","data"],"mappings":";;AAGA;;;;;;AAHA,IAAIA,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4CC,QAAQ,QAAR,EAAkBC,MAAlB;;AAI5C,MAAMC,SAASF,QAAQ,MAAR,EAAgBG,YAAhB,CAA6BC,oBAA7B,CAAf;AACA,MAAMC,eAAeL,QAAQ,WAAR,CAArB;AACA,MAAMM,KAAKD,aAAaH,MAAb,CAAX;AACA,MAAMK,OAAOV,QAAQC,GAAR,CAAYU,IAAZ,IAAoB,IAAjC;AACAN,OAAOO,MAAP,CAAcF,IAAd,EAAoB,MAAM;AAACG,YAAQC,GAAR,CAAY,gBAAZ;AAA8B,CAAzD;;AAEA,IAAIC,UAAU,EAAd;;AAEA,SAASC,YAAT,CAAsBC,GAAtB,EAA2B;AACvB,WAAOC,OAAOD,GAAP,EACFE,OADE,CACM,IADN,EACY,OADZ,EACqBA,OADrB,CAC6B,IAD7B,EACmC,MADnC,EAEFA,OAFE,CAEM,IAFN,EAEY,MAFZ,EAEoBA,OAFpB,CAE4B,IAF5B,EAEkC,QAFlC,CAAP;AAGH;;AAED,MAAMC,WAAYC,MAAD,IAAY;AAC3B,UAAMC,eAAe,MAAM;AACvBT,gBAAQC,GAAR,CAAY,qBAAZ;AACH,KAFD;;AAIAO,WAAOE,EAAP,CAAU,YAAV,EAAwBD,YAAxB;;AAEAD,WAAOE,EAAP,CAAU,WAAV,EAAwBC,GAAD,IAAS;AAC5B,YAAIT,QAAQU,MAAR,GAAiB,CAArB,EAAwB;AACpB,kBAAMC,OAAOC,KAAKC,SAAL,CAAe,EAAC,QAAQ,SAAT,EAAoB,QAAQb,OAA5B,EAAf,CAAb;AACAM,mBAAOQ,IAAP,CAAY,aAAZ,EAA4BH,IAA5B;AAEH;AACD,cAAMI,aAAa;AACfC,kBAAO,IAAIC,IAAJ,EAAD,CAAaC,OAAb,EADS;AAEfC,kBAAM,uBAFS;AAGfC,oBAAQX,IAAIY;AAHG,SAAnB;AAKArB,gBAAQsB,IAAR,CAAaP,UAAb;AACAf,kBAAUA,QAAQuB,KAAR,CAAc,CAAC,GAAf,CAAV;AACA,cAAMZ,OAAOC,KAAKC,SAAL,CAAe,EAAC,QAAQ,SAAT,EAAoB,QAAOE,UAA3B,EAAf,CAAb;AACArB,WAAGoB,IAAH,CAAQ,aAAR,EAAuBH,IAAvB;AACH,KAfD;;AAiBAL,WAAOE,EAAP,CAAU,SAAV,EAAsBC,GAAD,IAAS;AAC1B,YAAIA,IAAIY,SAAJ,KAAkB,WAAtB,EAAmC;AAC/BrB,sBAAS,EAAT;AACH;AACD,cAAMe,aAAa;AACfC,kBAAO,IAAIC,IAAJ,EAAD,CAAaC,OAAb,EADS;AAEfC,kBAAMlB,aAAaQ,IAAIY,SAAjB,CAFS;AAGfD,oBAAQnB,aAAaQ,IAAIe,QAAjB;AAHO,SAAnB;;AAMAxB,gBAAQsB,IAAR,CAAaP,UAAb;AACAf,kBAAUA,QAAQuB,KAAR,CAAc,CAAC,GAAf,CAAV;AACA,cAAMZ,OAAOC,KAAKC,SAAL,CAAe,EAACY,MAAM,SAAP,EAAkBC,MAAMX,UAAxB,EAAf,CAAb;AACArB,WAAGoB,IAAH,CAAQ,aAAR,EAAuBH,IAAvB;AACH,KAdD;AAeD,CAvCD;;AAyCAjB,GAAGc,EAAH,CAAM,YAAN,EAAoBH,QAApB","file":"ws-server.js","sourcesContent":["if (process.env.NODE_ENV === 'development') require('dotenv').config();\n\n\nimport app from './http-server';\nconst server = require('http').createServer(app);\nconst socketServer = require('socket.io');\nconst io = socketServer(server);\nconst port = process.env.PORT || 1337;\nserver.listen(port, () => {console.log('server started')});\n\nlet history = [];\n\nfunction htmlEntities(str) {\n    return String(str)\n        .replace(/&/g, '&amp;').replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n}\n\nconst handleIO = (socket) => {\n  const disconnected = () => {\n      console.log(\"Client Disconnected\")\n  };\n\n  socket.on('disconnect', disconnected);\n\n  socket.on('user_name', (msg) => {\n      if (history.length > 0) {\n          const json = JSON.stringify({\"type\": 'history', \"data\": history});\n          socket.emit('new_message',  json);\n\n      }\n      const historyObj = {\n          time: (new Date()).getTime(),\n          text: \"Thanks for logging in\",\n          author: msg.clientMsg,\n      };\n      history.push(historyObj);\n      history = history.slice(-100);\n      const json = JSON.stringify({\"type\": 'message', \"data\":historyObj});\n      io.emit('new_message', json);\n  });\n\n  socket.on('message', (msg) => {\n      if (msg.clientMsg === \"deleteall\") {\n          history =[];\n      }\n      const historyObj = {\n          time: (new Date()).getTime(),\n          text: htmlEntities(msg.clientMsg),\n          author: htmlEntities(msg.userName),\n      };\n\n      history.push(historyObj);\n      history = history.slice(-100);\n      const json = JSON.stringify({type: 'message', data: historyObj });\n      io.emit('new_message', json);\n  });\n};\n\nio.on('connection', handleIO);"]}